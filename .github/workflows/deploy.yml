name: release

on:
  push:
    branches:
      next
  pull_request:
    branches:
      next


jobs:
  install:
    name: Install dependencies and cache modeles
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Cache Cypress binary
        id: cache-cypress-binary
        uses: actions/cache@v2
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-cache-${{ hashFiles('**/yarn.lock') }}

      - name: Install
        env:
          # make sure every Cypress install prints minimal information
          CI: 1
        if: |
          steps.cache-node-modules.outputs.cache-hit != 'true' ||
          steps.cache-cypress-binary.outputs.cache-hit != 'true'
        run: | 
          npx lerna bootstrap
          npx cypress install


  cypress-run:
    name: Cypress run
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v2

      - name: Load node_modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Cache Cypress binary
        id: cache-cypress-binary
        uses: actions/cache@v2
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-cache-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache-cypress-binary.outputs.cache-hit != 'true'
        run: |
          yarn install --frozen-lockfile
          npx cypress install

      - name: Verify Cypress
        run: |
          npx cypress cache path
          npx cypress cache list
          npx cypress verify

      - name: Start local dev and Cypress tests
        uses: cypress-io/github-action@v2
        env:
          CI: action
          VUE_APP_CI_BASE_URL: http://112.74.169.178
        with:
          start: npx cross-env NODE_ENV=production vue-cli-service serve --mode browser
          command: yarn test:run


  build:
    name: Yarn build
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Load node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Lint
        run: yarn lint

      - name: Build to host
        env:
          VUE_APP_CI_BASE_URL: /
        run: yarn build
      
      - name: Rename dist
        run: cp -r dist music
      
      - name: Copy music to host
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          source: "music/"
          target: "/usr/sitemap"

      - name: Build to github page
        env:
          VUE_APP_CI_BASE_URL: https://112.74.169.178
        run: yarn build

      - name: Release to github page
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          GITHUB_REPO: github.com/hq001/hq001.github.io.git
        run: ./script/deploy.sh
